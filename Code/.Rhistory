}
dim(temp_matrix)
temp_matrix
mat_name
full_mat_law[mat_name]
full_mat_law[mat_name, drop = TRUE]
full_mat_law[mat_name] %>% unlist()
full_mat_law[mat_name] %>% as.matrix()
full_mat_law[mat_name]
dims(full_mat_law[mat_name])
length(full_mat_law[mat_name])
full_mat_law[mat_name][1]
full_mat_law[mat_name][1] %>% dim()
full_mat_law[mat_name][[1]] %>% dim()
full_mat_law[[mat_name]] %>% dim()
full_mat_law[[mat_name]]
temp_matrix <- full_mat_law[[mat_name]]
dim(temp_matrix)[1]
1:71
col_names(temp_matrix) <- 1:dim(temp_matrix)[1]
names(temp_matrix) <- 1:dim(temp_matrix)[1]
for(mat_name in adjs_names){
temp_matrix <- full_mat_law[[mat_name]]
names(temp_matrix) <- 1:dim(temp_matrix)[1]
file_name <- mat_name %>%
str_replace("\\.","_") %>%
paste0(".csv")
temp_path <- paste0(here("../Outputs/Data/Lazega/"),file_name)
temp_matrix %>%
as_tibble() %>%
write_csv(temp_path)
}
temp_matrix %>%
as_tibble()
temp_matrix %>%
as_tibble(.name_repair = "unique")
temp_matrix %>%
as_tibble(.name_repair = "minimal")
for(mat_name in adjs_names){
temp_matrix <- full_mat_law[[mat_name]]
names(temp_matrix) <- 1:dim(temp_matrix)[1]
file_name <- mat_name %>%
str_replace("\\.","_") %>%
paste0(".csv")
temp_path <- paste0(here("../Outputs/Data/Lazega/"),file_name)
temp_matrix %>%
as_tibble(.name_repair = "minimal") %>%
write_csv(temp_path)
}
temp_matrix %>%
as_tibble(.name_repair = "universal")
temp_matrix %>%
as_tibble(.name_repair = "check_unique")
temp_matrix
colnames(temp_matrix)
col.names(temp_matrix)
temp_matrix <- full_mat_law[[mat_name]]
col.names(temp_matrix)
colnames(temp_matrix)
colnames(temp_matrix) <- 1:dim(temp_matrix)[1]
temp_matrix %>%
as_tibble(.name_repair = "check_unique")
for(mat_name in adjs_names){
temp_matrix <- full_mat_law[[mat_name]]
colnames(temp_matrix) <- 1:dim(temp_matrix)[1]
file_name <- mat_name %>%
str_replace("\\.","_") %>%
paste0(".csv")
temp_path <- paste0(here("../Outputs/Data/Lazega/"),file_name)
temp_matrix %>%
as_tibble(.name_repair = "check_unique") %>%
write_csv(temp_path)
}
read_csv(here("../Data/Karate/karate.txt"))
read_delim(here("../Data/Karate/karate.txt"))
read_delim(here("../Data/Karate/karate.txt"),
delim = " ")
read_delim(here("../Data/Karate/karate.txt"),
delim = "\t")
read_delim(here("../Data/Karate/karate.txt"),
delim = "\t",
header = FALSE)
read_delim(here("../Data/Karate/karate.txt"),
delim = "\t",
skip = FALSE)
read_tsv(here("../Data/Karate/karate.txt"),
col_names = FALSE)
read_tsv(here("../Data/Karate/karate.txt"),
col_names = c("from","to"))
edge_list_karate <-
read_tsv(here("../Data/Karate/karate.txt"),
col_names = c("from","to"),
col_types = cols(
from = col_integer(),
to = col_integer()
)
)
edge_list_karate <-
read_tsv(here("../Data/Karate/karate.txt"),
col_names = c("from","to"),
col_types = cols(
from = col_integer(),
to = col_integer()
)
) %>%
as_tibble()
library(tidyverse)
if(!"here" %in% installed.packages()){
install.packages("here")
}
library(here)
setwd(here())
if(!"tidygraph" %in% installed.packages()){
devtools::install_github('thomasp85/tidygraph')
}
library(tidygraph)
edge_list_karate %>% tbl_graph()
edge_list_karate %>% tbl_graph(edges = .)
edge_list_karate %>% tbl_graph(edges = .) %>% to_undirected()
edge_list_karate %>% tbl_graph(edges = .) %>% to_undirected() %>% to_simple()
edge_list_karate %>% tbl_graph(edges = .) %>% to_simple()
edge_list_karate %>% tbl_graph(nodes = 1:34, edges = .) %>% to_undirected()
edge_list_karate %>% tbl_graph(nodes = 1:36, edges = .) %>% to_undirected()
edge_list_karate %>% tbl_graph(nodes = 1:38, edges = .) %>% to_undirected()
edge_list_karate %>% tbl_graph(nodes = 1:39, edges = .) %>% to_undirected()
edge_list_karate %>% tbl_graph(edges = .) %>% to_undirected()
edge_list_karate %>% unlist()
edge_list_karate %>% unlist() %>% max()
edge_list_karate %>%
tbl_graph(edges = .)
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_simple()
?to_undirected
read_tsv(here("../Data/Karate/karate.txt"),
col_names = c("from","to"),
col_types = cols(
from = col_integer(),
to = col_integer()
)
)
edge_list_karate <-
read_tsv(here("../Data/Karate/karate.txt"),
col_names = c("from","to"),
col_types = cols(
from = col_character(),
to = col_character()
)
) %>%
as_tibble()
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected()
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
igraph::as_adj()
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
igraph::as_adj() %>%
as.matrix()
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes")
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes") %>%
arrange(name)
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes") %>%
arrange(as.integer(name))
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes") %>%
arrange(as_integer(name))
edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes") %>%
arrange(as.integer(name)) %>%
igraph::as_adj() %>%
as.matrix()
as_adj
adj_karate <- edge_list_karate %>%
tbl_graph(edges = .) %>%
to_undirected() %>%
activate("nodes") %>%
arrange(as.integer(name)) %>%
igraph::as_adj() %>%
as.matrix()
meta_karate <- read_csv(
here("../Data/Karate/karate_faction.txt"),
col_names = "Faction"
) %>%
rowid_to_column()
meta_karate <- read_csv(
here("../Data/Karate/karate_faction.txt"),
col_names = "Faction"
) %>%
rowid_to_column("names")
meta_karate %>%
write_csv(path = here("../Outputs/Data/Karate/metadata.csv"))
adj_karate
adj_karate %>%
as_tibble(.name_repair = "check_unique")
temp_path <- paste0(here("../Outputs/Data/Karate/adj.csv"))
adj_karate %>%
as_tibble(.name_repair = "check_unique") %>%
write_csv(temp_path)
full_mat_malaria <- readMat(here("../Data/Malaria/malariaDBLaNetworks2013.mat"))
full_mat_malaria %>% names()
full_mat_malaria$mats %>% str()
mala_names <- full_mat_malaria$header %>% unlist()
mala_meta_df <- tibble(
names = mala_names,
CP = full_mat_malaria$met.CP,
UPS = full_mat_malaria$met.UPS
)
mala_meta_df %>%
write_csv(path = here("../Outputs/Data/Malaria/metadata.csv"))
library(curl)
library(here)
curl_download("https://ndownloader.figshare.com/files/12927221", here("../Data/Fish/Fish.Rdata"))
Fish_data <- load(here("../Data/Fish/Fish.Rdata"))
library(tidyverse)
MatPa_Final_ok %>% glimpse()
MatPa_Final_ok %>% glimpse()
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download() %>%
load()
file <- here("../Data/Fish/Data.Rdata")
file <- here("../Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download(file) %>%
load(file)
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download(file) %>%
load(here("../Data/Fish/Data.Rdata"))
file <- here("../Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/articles/650228/versions/1" %>%
curl_download(file) %>%
load(here("../Data/Fish/Data.Rdata"))
"https://ndownloader.figshare.com/articles/650228/versions/1" %>%
curl_download(file) %>%
Data <-load(here("../Data/Fish/Data.Rdata"))
load("~/2019/Priebe/Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/articles/650228/versions/1" %>%
curl_download(file) %>%
Data <-read_rds(here("../Data/Fish/Data.Rdata"))
"https://ndownloader.figshare.com/articles/650228/versions/1" %>%
curl_download(file) %>%
Data <-readRDS(here("../Data/Fish/Data.Rdata"))
here("../Data/Fish/Data.Rdata")
Data <-source(here("../Data/Fish/Data.Rdata"))
Data <-readRDS(here("../Data/Fish/Data.Rdata"))
curl_download("https://ndownloader.figshare.com/files/3079760", here("R/Gravel_Nature_2019.R"))
curl_download("https://ndownloader.figshare.com/files/3079760", here("R/Gravel_Nature_2019.R"))
file <- here("../Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download(file) %>%
Data <-read_rds(here("../Data/Fish/Data.Rdata"))
file <- here("../Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download(file) %>%
Data <-load(here("../Data/Fish/Data.Rdata"))
file <- here("../Data/Fish/Data.Rdata")
"https://ndownloader.figshare.com/files/3079757" %>%
curl_download(file)
Data <-load(here("../Data/Fish/Data.Rdata"))
data$diet_matrix %>% glimpse()
data$mat_Cooc %>% glimpse()
data$mat_Cooc[1:4, 1:4]
rownames(data$mat_Cooc)
setdiff(rownames(data$mat_Cooc), colnames(data$mat_Cooc))
setdiff(colnames(data$mat_Cooc)
,
rownames(data$mat_Cooc))
dims(data$mat_Cooc)
dim(data$mat_Cooc)
reg_fn = function(Bprey,Bpred,quartil) {
library(quantreg)
mean_reg = lm(Bprey~Bpred)			# For the n parameter
qrsup = rq(Bprey~Bpred,tau = quartil[2])	# For the higher limit of the range
qrinf = rq(Bprey~Bpred,tau = quartil[1])	# For the lower limit of the range
return(list(mean_reg$coef,qrsup$coef,qrinf$coef))
}
install.packages("quantreg")
##############################################
# 2. Useful functions
##############################################
# Get regression parameters
# Input arguments:
# Bprey = log10 biomass of the prey
# Bpred = log10 biomass of the predator
# Quartil = a vector of the inferior and the superio quartile c(0.03,0.97)
# Returns a list of regression objectis
# Requires the quantreg package
reg_fn = function(Bprey,Bpred,quartil) {
library(quantreg)
mean_reg = lm(Bprey~Bpred)			# For the n parameter
qrsup = rq(Bprey~Bpred,tau = quartil[2])	# For the higher limit of the range
qrinf = rq(Bprey~Bpred,tau = quartil[1])	# For the lower limit of the range
return(list(mean_reg$coef,qrsup$coef,qrinf$coef))
}
##############################################
# Estimate the niche parameters for all species of a list
# Input arguments:
# pars = resulting parameters of the function reg_Niche
# Ball = list of body size
# Returns a matrix with four parameters for each species
get_pars_Niche = function(pars,Ball) {
# Unwrap the input parameters
mean_reg = pars[[1]]
qrsup = pars[[2]]
qrinf = pars[[3]]
# Estimate parameters for the allometric relationships
delta = mean_reg[2]
b1 = mean_reg[1]
b2 = delta
# Estimate the parameters for the niche model
n = Ball						# The niche n
c = b1 + b2*Ball				# The centroid c
low = qrinf[1] + qrinf[2]*Ball	# The lower limit of the range
high = qrsup[1] + qrsup[2]*Ball	# The higher limit of the range
return(cbind(n,c,low,high))
}
##############################################
# Transform the parameters into an interaction matrix (the metaweb)
# Input:
# n = vector of size S with the parameter n for each of the S species
# c = vector of size S with the parameter c for each of the S species
# low = vector of size S with the parameter low for each of the S species
# high = vector of size S with the parameter high for each of the S species
# Returns a SxS matrix with 0 indicating absence of a link and 1 indicating the presence of a link
# Predators on columns, preys on rows
L_fn = function(n,c,low,high) {
S = length(n)
L = matrix(0,nr=S,nc=S)
for(i in 1:S)
for(j in 1:S)
if(n[j]>low[i] && n[j]<high[i]) L[j,i] = 1
return(L)
}
##############################################
#  3. Calculate parameters for the artificial dataset
# Calculate the parameters
pars_reg = reg_fn(Bprey,Bpred,quartil = c(0.05,0.95))
pars_niche = get_pars_Niche(pars_reg,Ball)
# Calculate the metaweb structure
L = L_fn(pars_niche[,1],pars_niche[,2],pars_niche[,3],pars_niche[,4])
# Illustrate the interaction matrix
##############################################
#  4. Application
#
# The diet matrix
Mat_diet <- data$diet_matrix
# The log body size
BodySize <- sort(data$BodySize_cal)
S <- length(BodySize)
### Prey/predator interaction calculation
# Formating the data as a vector of prey body size and a vector for corresponding predator body size
pairs <- NULL
for(i in 1:S){
for(j in 1:S){
if( Mat_diet[i,j] == 1){pairs <- rbind(pairs,c(BodySize[i],BodySize[j]))} # end of if
} # end of j
} # end of i
Bprey <- pairs[,1]
Bpred <- pairs[,2]
### Get regression parameters
Param_reg <- reg_fn (Bprey,Bpred,quartil = c(0.03,0.97))
### The log body size for the regional pool of 557 fish species
BS_med  <- data$Body_Size_med
### Estimation of the 3 niche parameters for all species
pars_Niche <- get_pars_Niche(Param_reg, BS_med)
### Put a threshold size to take into account that small fishes in the data do not have any prey (they are planktonivores)
Treshold  <-  which(pars_Niche[,"n"]<=1.367915)
pars_Niche[,"low"][Treshold] <- 0
pars_Niche[,"high"][Treshold] <- 0
### Computation of the final interaction matrix
mat_med <- L_fn(pars_Niche[,1],pars_Niche[,2],pars_Niche[,3],pars_Niche[,4])
### Correction by the range overlap
mat_Cooc <-data$mat_Cooc
Cor_mat = (mat_med * mat_Cooc)
##############################################
#  3. Calculate parameters for the artificial dataset
# Calculate the parameters
pars_reg = reg_fn(Bprey,Bpred,quartil = c(0.05,0.95))
pars_niche = get_pars_Niche(pars_reg,Ball)
# Calculate the metaweb structure
L = L_fn(pars_niche[,1],pars_niche[,2],pars_niche[,3],pars_niche[,4])
# Illustrate the interaction matrix
pars_niche = get_pars_Niche(pars_reg,Ball)
par(mfrow=c(2,1), mar=c(1,4,3.5,4))
image(x=c(1:length(BS_med)),y=c(1:length(BS_med)),z=mat_med,xlab = "", ylab = "Prey body size rank",cex.axis = 0.4,cex.lab = 0.5,col=c("Black","white"),mgp=c(1,0.1,0),tcl=-0.2,xlim=c(25,557),ylim=c(25,557))
mtext(text="(a)",side=2,line=1,las=2,at=558,cex=0.6)
par(mar=c(3.5,4,1,4))
image(x=c(1:length(BS_med)),y=c(1:length(BS_med)),z=Cor_mat,xlab = "Predator body size rank", ylab = "Prey body size rank",cex.axis = 0.4,cex.lab = 0.5,col=c("black","white"),mgp=c(1,0.1,0),tcl=-0.2, xlim=c(25,557),ylim=c(25,557))
mtext(text="(b)",side=2,line=1,las=2,at=558,cex=0.6)
dev.off()
install.packages("quantreg")
##############################################
#  4. Application
#
# The diet matrix
Mat_diet <- data$diet_matrix
# The log body size
BodySize <- sort(data$BodySize_cal)
S <- length(BodySize)
##############################################
#  4. Application
#
# The diet matrix
Mat_diet <- data$diet_matrix
load("~/2019/Priebe/Data/Fish/Data.Rdata")
##############################################
#  4. Application
#
# The diet matrix
Mat_diet <- data$diet_matrix
# The log body size
BodySize <- sort(data$BodySize_cal)
S <- length(BodySize)
pairs <- NULL
for(i in 1:S){
for(j in 1:S){
if( Mat_diet[i,j] == 1){pairs <- rbind(pairs,c(BodySize[i],BodySize[j]))} # end of if
} # end of j
} # end of i
Bprey <- pairs[,1]
Bpred <- pairs[,2]
reg_fn = function(Bprey,Bpred,quartil) {
library(quantreg)
mean_reg = lm(Bprey~Bpred)			# For the n parameter
qrsup = rq(Bprey~Bpred,tau = quartil[2])	# For the higher limit of the range
qrinf = rq(Bprey~Bpred,tau = quartil[1])	# For the lower limit of the range
return(list(mean_reg$coef,qrsup$coef,qrinf$coef))
}
### Get regression parameters
Param_reg <- reg_fn (Bprey,Bpred,quartil = c(0.03,0.97))
### The log body size for the regional pool of 557 fish species
BS_med  <- data$Body_Size_med
get_pars_Niche = function(pars,Ball) {
# Unwrap the input parameters
mean_reg = pars[[1]]
qrsup = pars[[2]]
qrinf = pars[[3]]
# Estimate parameters for the allometric relationships
delta = mean_reg[2]
b1 = mean_reg[1]
b2 = delta
# Estimate the parameters for the niche model
n = Ball						# The niche n
c = b1 + b2*Ball				# The centroid c
low = qrinf[1] + qrinf[2]*Ball	# The lower limit of the range
high = qrsup[1] + qrsup[2]*Ball	# The higher limit of the range
return(cbind(n,c,low,high))
}
### The log body size for the regional pool of 557 fish species
BS_med  <- data$Body_Size_med
### Estimation of the 3 niche parameters for all species
pars_Niche <- get_pars_Niche(Param_reg, BS_med)
### Put a threshold size to take into account that small fishes in the data do not have any prey (they are planktonivores)
Treshold  <-  which(pars_Niche[,"n"]<=1.367915)
pars_Niche[,"low"][Treshold] <- 0
pars_Niche[,"high"][Treshold] <- 0
L_fn = function(n,c,low,high) {
S = length(n)
L = matrix(0,nr=S,nc=S)
for(i in 1:S)
for(j in 1:S)
if(n[j]>low[i] && n[j]<high[i]) L[j,i] = 1
return(L)
}
### Computation of the final interaction matrix
mat_med <- L_fn(pars_Niche[,1],pars_Niche[,2],pars_Niche[,3],pars_Niche[,4])
### Correction by the range overlap
mat_Cooc <-data$mat_Cooc
Cor_mat = (mat_med * mat_Cooc)
Cor_mat
Cor_mat %>% row.names()
library(tidyverse)
Cor_mat %>% row.names()
Cor_mat[,1]
Cor_mat[1,]
Cor_mat %>% as_tibble()
Cor_mat %>% as_tibble() %>% write_csv(here("../Outputs/Data/Fish/adj.csv"))
library(here)
Cor_mat %>% as_tibble() %>% write_csv(here("../Outputs/Data/Fish/adj.csv"))
BS_med
BS_med %>% as_tibble()
BS_med %>% enframe(name = "names", value = "Body_size_log")
BS_med %>% enframe(name = "names", value = "Body_size_log") %>% write_csv(here("../Outputs/Data/Fish/metadata.csv"))
malaria1 <- read_csv("~/2019/Priebe/Outputs/Data/Malaria/adj_1.csv")
malaria1
malaria1 %>% rowsum()
malaria1 %>% map(~ .x %>% sum)
malaria1 %>% map(~ .x %>% sum) %>% mean()
malaria1 %>% map(~ .x %>% sum) %>% mean(na.rm = TRUE)
malaria1 %>% map(~ .x %>% sum) %>% as.vector() %>% mean(na.rm = TRUE)
malaria1 %>% summarise( mean = sum(everything()))
Cor_mat %>% map(~ .x %>% sum)
Cor_mat %>% sample_frac(0.1) %>% map(~ .x %>% sum)
Cor_mat %>% sample_frac(0.1)
Cor_mat %>% rowsum()
Cor_mat %>% row_sum()
